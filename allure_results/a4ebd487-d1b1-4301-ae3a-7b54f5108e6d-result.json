{"name": "test_questions_and_answer[6-\\u0414\\u0430, \\u043f\\u043e\\u043a\\u0430 \\u0441\\u0430\\u043c\\u043e\\u043a\\u0430\\u0442 \\u043d\\u0435 \\u043f\\u0440\\u0438\\u0432\\u0435\\u0437\\u043b\\u0438. \\u0428\\u0442\\u0440\\u0430\\u0444\\u0430 \\u043d\\u0435 \\u0431\\u0443\\u0434\\u0435\\u0442, \\u043e\\u0431\\u044a\\u044f\\u0441\\u043d\\u0438\\u0442\\u0435\\u043b\\u044c\\u043d\\u043e\\u0439 \\u0437\\u0430\\u043f\\u0438\\u0441\\u043a\\u0438 \\u0442\\u043e\\u0436\\u0435 \\u043d\\u0435 \\u043f\\u043e\\u043f\\u0440\\u043e\\u0441\\u0438\\u043c. \\u0412\\u0441\\u0435 \\u0436\\u0435 \\u0441\\u0432\\u043e\\u0438.]", "status": "broken", "statusDetails": {"message": "TypeError: unsupported callable", "trace": "func = <staticmethod(<function BasePage.extraction_locator at 0x000001A668720E00>)>\n\n    def getfullargspec(func):\n        \"\"\"Get the names and default values of a callable object's parameters.\n    \n        A tuple of seven things is returned:\n        (args, varargs, varkw, defaults, kwonlyargs, kwonlydefaults, annotations).\n        'args' is a list of the parameter names.\n        'varargs' and 'varkw' are the names of the * and ** parameters or None.\n        'defaults' is an n-tuple of the default values of the last n parameters.\n        'kwonlyargs' is a list of keyword-only parameter names.\n        'kwonlydefaults' is a dictionary mapping names from kwonlyargs to defaults.\n        'annotations' is a dictionary mapping parameter names to annotations.\n    \n        Notable differences from inspect.signature():\n          - the \"self\" parameter is always reported, even for bound methods\n          - wrapper chains defined by __wrapped__ *not* unwrapped automatically\n        \"\"\"\n        try:\n            # Re: `skip_bound_arg=False`\n            #\n            # There is a notable difference in behaviour between getfullargspec\n            # and Signature: the former always returns 'self' parameter for bound\n            # methods, whereas the Signature always shows the actual calling\n            # signature of the passed object.\n            #\n            # To simulate this behaviour, we \"unbind\" bound methods, to trick\n            # inspect.signature to always return their first parameter (\"self\",\n            # usually)\n    \n            # Re: `follow_wrapper_chains=False`\n            #\n            # getfullargspec() historically ignored __wrapped__ attributes,\n            # so we ensure that remains the case in 3.3+\n    \n>           sig = _signature_from_callable(func,\n                                           follow_wrapper_chains=False,\n                                           skip_bound_arg=False,\n                                           sigcls=Signature,\n                                           eval_str=False)\n\nC:\\python\\Lib\\inspect.py:1385: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nC:\\python\\Lib\\inspect.py:2592: in _signature_from_callable\n    return _signature_from_builtin(sigcls, obj,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ncls = <class 'inspect.Signature'>, func = <staticmethod(<function BasePage.extraction_locator at 0x000001A668720E00>)>, skip_bound_arg = False\n\n    def _signature_from_builtin(cls, func, skip_bound_arg=True):\n        \"\"\"Private helper function to get signature for\n        builtin callables.\n        \"\"\"\n    \n        if not _signature_is_builtin(func):\n            raise TypeError(\"{!r} is not a Python builtin \"\n                            \"function\".format(func))\n    \n        s = getattr(func, \"__text_signature__\", None)\n        if not s:\n>           raise ValueError(\"no signature found for builtin {!r}\".format(func))\nE           ValueError: no signature found for builtin <staticmethod(<function BasePage.extraction_locator at 0x000001A668720E00>)>\n\nC:\\python\\Lib\\inspect.py:2382: ValueError\n\nThe above exception was the direct cause of the following exception:\n\nself = <tests.test_main_page.TestMainPage object at 0x000001A6687248F0>, driver = <selenium.webdriver.firefox.webdriver.WebDriver (session=\"9e4450b5-a190-40ff-b869-6aaf44d08e5a\")>\nq_num = 6, expected_result = 'Да, пока самокат не привезли. Штрафа не будет, объяснительной записки тоже не попросим. Все же свои.'\n\n    @allure.step('Тестируем вопрос-ответ')\n    @pytest.mark.parametrize(\"q_num, expected_result\",\n                             [(0, ANSWER_Q_0),\n                              (1, ANSWER_Q_1),\n                              (2, ANSWER_Q_2),\n                              (3, ANSWER_Q_3),\n                              (4, ANSWER_Q_4),\n                              (5, ANSWER_Q_5),\n                              (6, ANSWER_Q_6),\n                              (7, ANSWER_Q_7)])\n    def test_questions_and_answer(self, driver, q_num, expected_result):\n        main_page = MainPage(driver)\n        main_page.get_url(MAIN_URL)\n        main_page.click_on_cookie()\n>       result = main_page.click_to_question_get_answer_text(q_num)\n\ntests\\test_main_page.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages\\main_page.py:24: in click_to_question_get_answer_text\n    self.click_on_question(num)\npages\\main_page.py:14: in click_on_question\n    question_loc = self.extraction_locator(MainPageLocators.QUESTION, num)\nvenv\\Lib\\site-packages\\allure_commons\\utils.py:231: in func_parameters\n    arg_spec = inspect.getfullargspec(func)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nfunc = <staticmethod(<function BasePage.extraction_locator at 0x000001A668720E00>)>\n\n    def getfullargspec(func):\n        \"\"\"Get the names and default values of a callable object's parameters.\n    \n        A tuple of seven things is returned:\n        (args, varargs, varkw, defaults, kwonlyargs, kwonlydefaults, annotations).\n        'args' is a list of the parameter names.\n        'varargs' and 'varkw' are the names of the * and ** parameters or None.\n        'defaults' is an n-tuple of the default values of the last n parameters.\n        'kwonlyargs' is a list of keyword-only parameter names.\n        'kwonlydefaults' is a dictionary mapping names from kwonlyargs to defaults.\n        'annotations' is a dictionary mapping parameter names to annotations.\n    \n        Notable differences from inspect.signature():\n          - the \"self\" parameter is always reported, even for bound methods\n          - wrapper chains defined by __wrapped__ *not* unwrapped automatically\n        \"\"\"\n        try:\n            # Re: `skip_bound_arg=False`\n            #\n            # There is a notable difference in behaviour between getfullargspec\n            # and Signature: the former always returns 'self' parameter for bound\n            # methods, whereas the Signature always shows the actual calling\n            # signature of the passed object.\n            #\n            # To simulate this behaviour, we \"unbind\" bound methods, to trick\n            # inspect.signature to always return their first parameter (\"self\",\n            # usually)\n    \n            # Re: `follow_wrapper_chains=False`\n            #\n            # getfullargspec() historically ignored __wrapped__ attributes,\n            # so we ensure that remains the case in 3.3+\n    \n            sig = _signature_from_callable(func,\n                                           follow_wrapper_chains=False,\n                                           skip_bound_arg=False,\n                                           sigcls=Signature,\n                                           eval_str=False)\n        except Exception as ex:\n            # Most of the times 'signature' will raise ValueError.\n            # But, it can also raise AttributeError, and, maybe something\n            # else. So to be fully backwards compatible, we catch all\n            # possible exceptions here, and reraise a TypeError.\n>           raise TypeError('unsupported callable') from ex\nE           TypeError: unsupported callable\n\nC:\\python\\Lib\\inspect.py:1395: TypeError"}, "steps": [{"name": "Тестируем вопрос-ответ", "status": "broken", "statusDetails": {"message": "TypeError: unsupported callable\n", "trace": "  File \"C:\\Users\\user\\YandexProjects\\Sprint_6\\venv\\Lib\\site-packages\\allure_commons\\_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"C:\\Users\\user\\YandexProjects\\Sprint_6\\tests\\test_main_page.py\", line 23, in test_questions_and_answer\n    result = main_page.click_to_question_get_answer_text(q_num)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\user\\YandexProjects\\Sprint_6\\venv\\Lib\\site-packages\\allure_commons\\_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"C:\\Users\\user\\YandexProjects\\Sprint_6\\pages\\main_page.py\", line 24, in click_to_question_get_answer_text\n    self.click_on_question(num)\n  File \"C:\\Users\\user\\YandexProjects\\Sprint_6\\venv\\Lib\\site-packages\\allure_commons\\_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"C:\\Users\\user\\YandexProjects\\Sprint_6\\pages\\main_page.py\", line 14, in click_on_question\n    question_loc = self.extraction_locator(MainPageLocators.QUESTION, num)\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\user\\YandexProjects\\Sprint_6\\venv\\Lib\\site-packages\\allure_commons\\_allure.py\", line 189, in impl\n    params = func_parameters(func, *a, **kw)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\user\\YandexProjects\\Sprint_6\\venv\\Lib\\site-packages\\allure_commons\\utils.py\", line 231, in func_parameters\n    arg_spec = inspect.getfullargspec(func)\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\python\\Lib\\inspect.py\", line 1395, in getfullargspec\n    raise TypeError('unsupported callable') from ex\n"}, "steps": [{"name": "Подгружаем драйвер в конструктор", "status": "passed", "parameters": [{"name": "driver", "value": "<selenium.webdriver.firefox.webdriver.WebDriver (session=\"9e4450b5-a190-40ff-b869-6aaf44d08e5a\")>"}], "start": 1722356861347, "stop": 1722356861347}, {"name": "Загружаем страницу", "status": "passed", "parameters": [{"name": "url", "value": "'https://qa-scooter.praktikum-services.ru/'"}], "start": 1722356861347, "stop": 1722356863370}, {"name": "Соглашаемся на использование куки", "status": "passed", "steps": [{"name": "Кликаем на элемент", "status": "passed", "steps": [{"name": "Ищем элемент на странице", "status": "passed", "parameters": [{"name": "locator", "value": "('xpath', '//button[text() = \"да все привыкли\"]')"}], "start": 1722356863371, "stop": 1722356863400}], "parameters": [{"name": "locator", "value": "('xpath', '//button[text() = \"да все привыкли\"]')"}], "start": 1722356863371, "stop": 1722356863631}], "start": 1722356863371, "stop": 1722356863631}, {"name": "Кликаем на вопрос и получаем текст ответа", "status": "broken", "statusDetails": {"message": "TypeError: unsupported callable\n", "trace": "  File \"C:\\Users\\user\\YandexProjects\\Sprint_6\\venv\\Lib\\site-packages\\allure_commons\\_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"C:\\Users\\user\\YandexProjects\\Sprint_6\\pages\\main_page.py\", line 24, in click_to_question_get_answer_text\n    self.click_on_question(num)\n  File \"C:\\Users\\user\\YandexProjects\\Sprint_6\\venv\\Lib\\site-packages\\allure_commons\\_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"C:\\Users\\user\\YandexProjects\\Sprint_6\\pages\\main_page.py\", line 14, in click_on_question\n    question_loc = self.extraction_locator(MainPageLocators.QUESTION, num)\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\user\\YandexProjects\\Sprint_6\\venv\\Lib\\site-packages\\allure_commons\\_allure.py\", line 189, in impl\n    params = func_parameters(func, *a, **kw)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\user\\YandexProjects\\Sprint_6\\venv\\Lib\\site-packages\\allure_commons\\utils.py\", line 231, in func_parameters\n    arg_spec = inspect.getfullargspec(func)\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\python\\Lib\\inspect.py\", line 1395, in getfullargspec\n    raise TypeError('unsupported callable') from ex\n"}, "steps": [{"name": "Кликаем на вопрос", "status": "broken", "statusDetails": {"message": "TypeError: unsupported callable\n", "trace": "  File \"C:\\Users\\user\\YandexProjects\\Sprint_6\\venv\\Lib\\site-packages\\allure_commons\\_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"C:\\Users\\user\\YandexProjects\\Sprint_6\\pages\\main_page.py\", line 14, in click_on_question\n    question_loc = self.extraction_locator(MainPageLocators.QUESTION, num)\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\user\\YandexProjects\\Sprint_6\\venv\\Lib\\site-packages\\allure_commons\\_allure.py\", line 189, in impl\n    params = func_parameters(func, *a, **kw)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\user\\YandexProjects\\Sprint_6\\venv\\Lib\\site-packages\\allure_commons\\utils.py\", line 231, in func_parameters\n    arg_spec = inspect.getfullargspec(func)\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\python\\Lib\\inspect.py\", line 1395, in getfullargspec\n    raise TypeError('unsupported callable') from ex\n"}, "parameters": [{"name": "num", "value": "6"}], "start": 1722356863632, "stop": 1722356863632}], "parameters": [{"name": "num", "value": "6"}], "start": 1722356863631, "stop": 1722356863633}], "parameters": [{"name": "driver", "value": "<selenium.webdriver.firefox.webdriver.WebDriver (session=\"9e4450b5-a190-40ff-b869-6aaf44d08e5a\")>"}, {"name": "q_num", "value": "6"}, {"name": "expected_result", "value": "'Да, пока самокат не привезли. Штрафа не будет, объяснительной записки тоже не попросим. Все же свои.'"}], "start": 1722356861347, "stop": 1722356863635}], "parameters": [{"name": "q_num", "value": "6"}, {"name": "expected_result", "value": "'Да, пока самокат не привезли. Штрафа не будет, объяснительной записки тоже не попросим. Все же свои.'"}], "start": 1722356861347, "stop": 1722356863637, "uuid": "c35d5dc1-e65e-4e5d-9144-ea6ca7dbb45d", "historyId": "492d6ccb389d590151e4f2f0d1ecc1ac", "testCaseId": "c8847cf02ab9a3414715e33c97d25583", "fullName": "tests.test_main_page.TestMainPage#test_questions_and_answer", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_main_page"}, {"name": "subSuite", "value": "TestMainPage"}, {"name": "host", "value": "WIN-O4R89KV0872"}, {"name": "thread", "value": "3352-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_main_page"}]}